y<- x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- "C:/Users/Laurence/Documents"
old.dir <- getwd()
dir.create(testdir)
testdir <- dir.create()
getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(filepath("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3",recursive=TRUE))
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink("test2dir", recursive=TRUE)
info(unlink)
?unlink
unlink(test2dir, recursive=TRUE)
unlink('test2dir', recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd("old.dir")
setwd("old.dir")
getwd()
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by 0.5)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(o,times=40)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
library("swirl")
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Laurence")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep= " ")
paste(1:3, c("X", "Y", "Z", sep=""))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep= "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3),c(5),c(7)]
x[x(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_dat
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 < 7
10 <= 10
5 != 7
(5 == 7) == !TRUE
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4>3.9
ISTRUE(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
library("swirl")
2^2
2^10
2^20
2^12
2^15
2^16
2^18
2^17
swirl
swirl()
Sys.Date()
mean(c(2,4,5)
mean(c(2,4,5))
submit(boring_function)
submit()
boring_function('My first function?')
boring_function('My first function!')
boring_function
quit
library ("swirl")
swirl
swril()
swirl()
q()
library("swirl")
swirl()
sys.Date()
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
subit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
remainder (5)
remaider (11,5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=1)
remainder(4, div=2)
args(remainder)
submit
submit()
submit()
submit()
submit()
submit()
submit()
help()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
skip()
submit()
skip()
skip()
submit()
submit()
submit()
submit()
skip()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
q()
swirl()
swirl()
submit()
info()
play()
nxt()
submit()
info()
skip()
skip()
submit()
submit()
submit()
play()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
func <- function(dat){
func(dat)
}
nxt90
nxt()
submit()
submit()
submit()
evaluate(stdev,c(1.4,3.6,7.9,8.8))
evaluate(Stdev,c(1.4,3.6,7.9,8.8))
info(standard deviation)
?mean
?deviation
?median
?statistics
evaluate(StDev,c(1.4,3.6,7.9,8.8))
evaluate(standard deviation,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate (function(x){x+1},6)
evaluate(function(x){x=c[1]}, c(8,4,0))
evaluate(function(x){x=c(1)}, c(8,4,0))
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram(now)
telegram("only")
submit()
submit()
submit()
submit()
mad_libs("Chicago", "upsetting", "stree")
submit()
"I"%p% "love R!"
"I"%p%"love"%p%"R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
vapply(flags, unique, numeric(1))
ok()
sapply(flags,clas)
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plant)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=(c(0.3,0.7)))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom (100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
?rpos
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t3)
class(t3)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars[speed], y= cars[dis])
plot(x=cars[,speed], y= cars[,dis])
plot(x=cars(, speed), y= cars(,dist))
plot(speed, dist)
plot (cars)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
?par.
?par
plot(cars, col=2)
plot (cars, xlim=c(10,15))
plots(cars, pch=2)
plot(cars, pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
getwd()
setwd()
setwd()
setwd()
setwd("C:/Users/Laurence/Documents/Online Courses/R Programming/Assign2")
getwd()
dir()
setwd("C:/Users/Laurence/Documents/Online Courses/R Programming/Assign2/ProgrammingAssignment2")
dir()
source("cachematrix.R")
mat <- matrix(c(2,6,8,3,4,5,2,5,6),3,3)
mat
l1 <- makeCacheMatrix(mat)
l1
cacheSolve(l2)
l2
cacheSolve(l1)
cacheSolve(l1)
source("cachematrix.R")
l1 <- makeCacheMatrix(mat)
l1
source("cachematrix.R")
l1 <- makeCacheMatrix(mat)
source("cachematrix.R")
l1 <- makeCacheMatrix(mat)
cacheSolve(l1)
cacheSolve(l1)
source("cachematrix.R")
l1 <- makeCacheMatrix(mat)
l1 <- makeCacheMatrix(mat)
cacheSolve(l1)
cacheSolve(l1)
